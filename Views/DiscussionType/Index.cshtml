@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewBag.PageTitle = "Meeting Type Master";
}
<div id="alertPlaceholder"></div>
@model List<DMCPortal.Web.Models.Operation>


    <style>
        body {
            background-color: #f8f9fa;
        }

       

        .header-left h5 {
            margin: 0;
            color: #0d6efd;
        }

        .header-left p {
            margin: 0;
            font-size: 14px;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 20px;
        }


        .user-name {
            font-weight: 600;
            color: #000;
        }

        .main-container {
            display: flex;
            height: calc(100vh - 60px);
        }

        

        .content-area {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .sidebar .list-group-item.active {
            background-color: #0d6efd;
            color: white;
            font-weight: bold;
        }

        .loading {
            text-align: center;
            padding: 20px;
        }

        .btn-cancel {
            margin-left: 10px;
        }
    </style>
<!-- Add this before your page scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    @{
        var firstName = User.Claims.FirstOrDefault(c => c.Type == "FirstName")?.Value ?? "User";
        var lastName = User.Claims.FirstOrDefault(c => c.Type == "LastName")?.Value ?? "";
        var initials = (string.IsNullOrEmpty(firstName) ? "" : firstName.Substring(0, 1).ToUpper()) +
        (string.IsNullOrEmpty(lastName) ? "" : lastName.Substring(0, 1).ToUpper());
    }
      <a href="@Url.Action("Index", "Master")" class="btn btn-primary" style="border-radius: 8px; padding: 8px 16px;">
        <i class="fas fa-arrow-left" style="margin-right: 6px;"></i> Back
    </a>




 
    <div class="main-container">
  

        <div class="content-area d-flex justify-content-center">
            <div class="w-100" style="max-width: 90%;">
                <h2 class="mb-4 text-center">Discussion Type Master</h2>
                <div id="alertPlaceholder"></div>

                <div class="card p-4 mb-5">
                    <form id="discussionTypeForm">
                        <input type="hidden" id="DiscussionTypeId" value="0" />
                        <div class="mb-3">
                            <label class="form-label">Name<span class="text-danger">*</span></label>
                            <input type="text" id="DiscussionTypeName" class="form-control" required maxlength="100" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea id="DiscussionTypeDesc" class="form-control" rows="3" maxlength="500"></textarea>
                        </div>
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="DiscussionIsActive" checked />
                            <label class="form-check-label">Is Active?</label>
                        </div>
                        <button type="submit" class="btn btn-success" id="saveBtn">
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            Save
                        </button>
                        <button type="button" class="btn btn-secondary btn-cancel" id="cancelBtn">Cancel</button>
                    </form>
                </div>

                <div class="card">
                    <div class="card-body">
                        <div id="loadingIndicator" class="loading d-none">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Loading discussion types...</p>
                        </div>
                        <table class="table table-bordered table-hover text-center" id="discussionTypeTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Active</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>


        <!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <b><span id="deleteItemName"></span></b>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>


        <script>
            $(function () {
                loadTable();

                $('#discussionTypeForm').submit(function (e) {
                    e.preventDefault();

                    const name = $('#DiscussionTypeName').val().trim();
                    if (!name) {
                        showAlert('Discussion type name is required', 'danger');
                        return;
                    }

                    const saveBtn = $('#saveBtn');
                    const spinner = saveBtn.find('.spinner-border');

                    // Show loading state
                    saveBtn.prop('disabled', true);
                    spinner.removeClass('d-none');

                    const model = {
                        DiscussionTypeId: +$('#DiscussionTypeId').val() || 0,
                        DiscussionTypeName: name,
                        DiscussionTypeDesc: $('#DiscussionTypeDesc').val().trim(),
                        IsActive: $('#DiscussionIsActive').is(':checked'),
                      
                    };

                    $.ajax({
                        url: '/DiscussionType/AddOrUpdate',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(model),
                        success: function (res) {
                            if (res.success) {
                                showAlert(res.message || 'Discussion type saved successfully', 'success');
                                resetForm();
                                loadTable();
                            } else {
                                showAlert(res.error || 'Save failed', 'danger');
                            }
                        },
                        error: function (xhr, status, error) {
                            let errorMessage = 'An error occurred while saving';
                            try {
                                const response = JSON.parse(xhr.responseText);
                                errorMessage = response.error || response.message || errorMessage;
                            } catch (e) {
                                // Use default message
                            }
                            showAlert(errorMessage, 'danger');
                        },
                        complete: function () {
                            // Hide loading state
                            saveBtn.prop('disabled', false);
                            spinner.addClass('d-none');
                        }
                    });
                });

                $('#cancelBtn').click(function () {
                    resetForm();
                });

                $(document).on('click', '.editBtn', function () {
                    const id = $(this).data('id');

                    $.ajax({
                        url: `/DiscussionType/GetById?id=${id}`,
                        method: 'GET',
                        success: function (data) {
                            if (data && !data.error) {
                                $('#DiscussionTypeId').val(data.discussionTypeId);
                                $('#DiscussionTypeName').val(data.discussionTypeName);
                                $('#DiscussionTypeDesc').val(data.discussionTypeDesc || '');
                                $('#DiscussionIsActive').prop('checked', data.isActive);

                                // Scroll to form
                                $('html, body').animate({
                                    scrollTop: $('#discussionTypeForm').offset().top - 100
                                }, 500);
                            } else {
                                showAlert(data.error || 'Failed to load discussion type', 'danger');
                            }
                        },
                        error: function () {
                            showAlert('Error loading discussion type', 'danger');
                        }
                    });
                });

                let deleteId = 0;

                $(document).on('click', '.deleteBtn', function () {
                    deleteId = $(this).data('id');
                    const name = $(this).closest('tr').find('td:nth-child(2)').text();
                    $('#deleteItemName').text(name);
                    $('#deleteModal').modal('show');
                });

                $('#confirmDeleteBtn').click(function () {
                    const btn = $(this);
                    const spinner = btn.find('.spinner-border');

                    btn.prop('disabled', true);
                    spinner.removeClass('d-none');

                    $.ajax({
                        url: `/DiscussionType/Delete?id=${deleteId}`,
                        method: 'DELETE',
                        success: function (res) {
                            if (res.success) {
                                showAlert(res.message || 'Deleted successfully', 'success');
                                loadTable();
                            } else {
                                showAlert(res.error || res.message || 'Delete failed', 'danger');
                            }
                            $('#deleteModal').modal('hide');
                        },
                        error: function (xhr) {
                            let msg = 'Error occurred';
                            try {
                                const res = JSON.parse(xhr.responseText);
                                msg = res.error || res.message || msg;
                            } catch { }
                            showAlert(msg, 'danger');
                        },
                        complete: function () {
                            btn.prop('disabled', false);
                            spinner.addClass('d-none');
                        }
                    });
                });

                function loadTable() {
                    const loadingIndicator = $('#loadingIndicator');
                    const tableBody = $('#discussionTypeTable tbody');

                    loadingIndicator.removeClass('d-none');
                    tableBody.html('');

                    $.ajax({
                      
                        url: '/DiscussionType/GetAll',
                        method: 'GET',
                        success: function (data) {
                            if (data && Array.isArray(data)) {
                                if (data.length === 0) {
                                    tableBody.html('<tr><td colspan="6" class="text-muted">No discussion types found</td></tr>');
                                } else {
                                    const rows = data.map(d => `
                                                    <tr>
                                                        <td>${d.discussionTypeId}</td>
                                                        <td>${escapeHtml(d.discussionTypeName)}</td>
                                                        <td>${escapeHtml(d.discussionTypeDesc || '')}</td>
                                                        <td>
                                                            <span class="badge ${d.isActive ? 'bg-success' : 'bg-secondary'}">
                                                                ${d.isActive ? 'Yes' : 'No'}
                                                            </span>
                                                        </td>
                                                                    <td>${formatDate(d.createdOn)}</td>
                                                        <td>
                                                            <button class="btn btn-sm btn-primary editBtn me-1" data-id="${d.discussionTypeId}">
                                                                Edit
                                                            </button>
                                                            <button class="btn btn-sm btn-danger deleteBtn" data-id="${d.discussionTypeId}">
                                                                Delete
                                                            </button>
                                                        </td>
                                                    </tr>
                                                `).join('');
                                    tableBody.html(rows);
                                }
                            } else {
                                showAlert(data.error || 'Failed to load discussion types', 'danger');
                                tableBody.html('<tr><td colspan="6" class="text-danger">Error loading data</td></tr>');
                            }
                        },
                        error: function () {
                            showAlert('Error loading discussion types', 'danger');
                            tableBody.html('<tr><td colspan="6" class="text-danger">Error loading data</td></tr>');
                        },
                        complete: function () {
                            loadingIndicator.addClass('d-none');
                        }
                    });
                }

                function resetForm() {
                    $('#discussionTypeForm')[0].reset();
                    $('#DiscussionTypeId').val('0');
                    $('#DiscussionIsActive').prop('checked', true);
                }

                function showAlert(msg, type) {
                    const alertHtml = `
                                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                                        ${escapeHtml(msg)}
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                `;
                    $('#alertPlaceholder').html(alertHtml);

                    // Auto-dismiss success alerts after 3 seconds
                    if (type === 'success') {
                        setTimeout(() => {
                            $('.alert-success').alert('close');
                        }, 3000);
                    }
                }

                function escapeHtml(text) {
                    if (!text) return '';
                    const div = document.createElement('div');
                    div.textContent = text;
                    return div.innerHTML;
                }

                function formatDate(dateString) {
                    if (!dateString) return '';
                    try {
                        return new Date(dateString).toLocaleDateString();
                    } catch {
                        return dateString;
                    }
                }
            });
        </script>
    </div>
