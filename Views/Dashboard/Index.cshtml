<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>DMC Portal - User Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
 
    <style>
        body {
            background-color: #f8f9fa;
        }

        .top-header {
            background-color: #ffffff;
            border-bottom: 1px solid #dee2e6;
            padding: 12px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-left h5 {
            margin: 0;
            color: #0d6efd;
        }

        .header-left p {
            margin: 0;
            font-size: 14px;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .notification-icon {
            position: relative;
            color: #6c757d;
            font-size: 18px;
            cursor: pointer;
            padding: 8px;
        }

            .notification-icon:hover {
                color: #0d6efd;
            }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            background-color: #0d6efd;
            color: #fff;
            font-weight: bold;
            font-size: 14px;
            width: 38px;
            height: 38px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

        .user-name {
            font-weight: 600;
            color: #000;
        }

        .main-container {
            display: flex;
            height: calc(100vh - 60px);
        }

        .sidebar {
            width: 250px;
            background-color: #ffffff;
            border-right: 1px solid #dee2e6;
            padding: 20px;
        }

            .sidebar .list-group-item.active {
                background-color: #0d6efd; /* Bootstrap Primary Blue */
                color: white;
                font-weight: bold;
            }

            .sidebar a {
                display: block;
                padding: 12px 10px;
                margin-bottom: 8px;
                color: #000;
                text-decoration: none;
                border-radius: 8px;
            }

                .sidebar a.active, .sidebar a:hover {
                    background-color: #e9ecef;
                    font-weight: bold;
                }

        .content-area {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .card-counter {
            padding: 20px;
            border-radius: 12px;
            background-color: #ffffff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }

        /* New user card styling to match screenshot */
        .user-card {
            background-color: #ffffff;
            border: none;
            border-radius: 10px;
            padding: 10px 30px;
            margin-bottom: 18px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
            min-height: 100px;
            border: 1px solid #0d6efd
        }

        .user-info-section {
            display: flex;
            align-items: center;
            gap: 20px;
            flex: 1;
            min-width: 280px;
        }

        .user-initial {
            background-color: #0d6efd;
            color: #fff;
            font-weight: bold;
            font-size: 20px;
            width: 55px;
            height: 55px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

        .user-details {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .user-name-text {
            font-weight: 600;
            color: #000;
            font-size: 18px;
            margin-bottom: 2px;
        }

        .user-email {
            color: #6c757d;
            font-size: 16px;
        }

        .user-metadata {
            display: flex;
            gap: 50px;
            align-items: center;
            flex: 2.5;
            min-width: 600px;
        }

        .metadata-group {
            display: flex;
            flex-direction: column;
            gap: 4px;
            min-width: 120px;
        }

        .metadata-label {
            font-size: 14px;
            color: #6c757d;
            margin-bottom: 3px;
            font-weight: 500;
        }

        .metadata-value {
            font-size: 16px;
            color: #000;
            font-weight: 600;
        }

        .user-actions {
            display: flex;
            gap: 12px;
            align-items: center;
            min-width: 280px;
            justify-content: flex-end;
        }

        .btn-edit {
            background-color: transparent;
            border: 1px solid #0d6efd;
            color: #0d6efd;
            padding: 8px 20px;
            border-radius: 6px;
            font-size: 15px;
            font-weight: 500;
            min-width: 70px;
        }

            .btn-edit:hover {
                background-color: #0d6efd;
                color: #fff;
            }




        button.btn.btn-outline-success.btn-sm.assign-role-btn {
            background-color: transparent;
            border: 1px solid #28a745;
            color: #28a745;
            padding: 8px 20px;
            border-radius: 6px;
            font-size: 15px;
            font-weight: 500;
            min-width: 70px;
        }

            button.btn.btn-outline-success.btn-sm.assign-role-btn:hover {
            background-color: #28a745;
                color: #fff;
            }

        .btn-delete {
            background-color: transparent;
            border: 1px solid #dc3545;
            color: #dc3545;
            padding: 8px 20px;
            border-radius: 6px;
            font-size: 15px;
            font-weight: 500;
            min-width: 70px;
        }

            .btn-delete:hover {
                background-color: #dc3545;
                color: #fff;
            }

        .btn-deactivate {
            background-color: transparent;
            border: 1px solid #dc3545;
            color: #dc3545;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 15px;
            font-weight: 500;
            min-width: 100px;
        }

            .btn-deactivate:hover {
                background-color: #dc3545;
                color: #fff;
            }

        .btn-activate {
            background-color: transparent;
            border: 1px solid #28a745;
            color: #28a745;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 15px;
            font-weight: 500;
            min-width: 100px;
        }

            .btn-activate:hover {
                background-color: #28a745;
                color: #fff;
            }

        .status-badge {
            display: inline-block;
            padding: 6px 14px;
            border-radius: 20px;
            font-size: 13px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-active {
            background-color: #d4edda;
            color: #155724;
        }

        .status-inactive {
            background-color: #f8d7da;
            color: #721c24;
        }

        #successMessage {
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 9999;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            border-radius: 8px;
            padding: 15px 20px;
        }
    </style>
</head>
<body>


    @{
        var firstName = User.Claims.FirstOrDefault(c => c.Type == "FirstName")?.Value ?? "User";
        var lastName = User.Claims.FirstOrDefault(c => c.Type == "LastName")?.Value ?? "";
        var initials = (string.IsNullOrEmpty(firstName) ? "" : firstName.Substring(0, 1).ToUpper()) +
        (string.IsNullOrEmpty(lastName) ? "" : lastName.Substring(0, 1).ToUpper());
    }

    <!-- Top Header -->
    <div class="top-header">
        <div class="header-left">
            <h5><b>DMC Portal</b></h5>
            <p class="text-muted">Travel Management System</p>
        </div>
        <div class="header-right">
            <div class="notification-icon">
                <i class="fas fa-bell"></i>
                <span class="text-muted ms-1">Notifications</span>
            </div>
            <div class="user-info dropdown">
                <div class="user-avatar dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    @initials
                </div>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><span class="dropdown-item-text">@firstName @lastName</span></li>
                    <li><hr class="dropdown-divider"></li>
                    <li>
                        <a class="dropdown-item text-danger" href="javascript:void(0)" id="logoutBtn">Logout</a>
                    </li>
                </ul>
            </div>

        </div>
    </div>

    <div class="main-container">
        <div class="sidebar">
            <a href="@Url.Action("Index", "Dashboard")"
               class="list-group-item list-group-item-action @(ViewContext.RouteData.Values["Controller"].ToString() == "Dashboard" ? "active" : "")">
                📊 Dashboard
            </a>

            <a href="@Url.Action("Index", "Trip")"
               class="list-group-item list-group-item-action @(ViewContext.RouteData.Values["Controller"].ToString() == "Trip" ? "active" : "")">
                ✈️ Trip Management
            </a>

            <a href="@Url.Action("Index", "LeadManagement")"
               class="list-group-item list-group-item-action @(ViewContext.RouteData.Values["Controller"].ToString() == "LeadManagement" ? "active" : "")">
                👥 Lead Management
            </a>

            <a href="@Url.Action("Index", "UserManagement")"
               class="list-group-item list-group-item-action @(ViewContext.RouteData.Values["Controller"].ToString() == "UserManagement" ? "active" : "")">
                👤 User Management
            </a>

            <a href="@Url.Action("Index", "Role")"
               class="list-group-item list-group-item-action @(ViewContext.RouteData.Values["Controller"].ToString() == "Role" ? "active" : "")">
                👤 Role Management
            </a>

            <a href="@Url.Action("Index", "Operation")"
               class="list-group-item list-group-item-action @(ViewContext.RouteData.Values["Controller"].ToString() == "Operation" ? "active" : "")">
                👤 Operation Management
            </a>
        </div>


        <!-- Main Content -->
        <div class="content-area">
            <h4><b>User Management</b></h4>

            <!-- Success Message -->
            <div id="successMessage" class="alert alert-success d-none"></div>
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div class="d-flex align-items-center gap-3" style="flex: 1;">
                    <input type="text" id="SearchInput" class="form-control" placeholder="Search users..." style="width:28%;">
                    <button class="btn btn-outline-primary" style="min-width: 130px;">Filter by Role</button>
                    <button class="btn btn-outline-secondary" style="min-width: 130px;">Export Users</button>
                </div>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#registerModal" id="addNewUserBtn">+ Add New User</button>
            </div>


            <!-- User Statistics -->
            <div class="row text-center mb-4">
                <div class="col">
                    <div class="card-counter">
                        <h4 style="color:blue;"><b id="totalUsersCount">0</b></h4>

                        <p>Total Users</p>
                    </div>
                </div>
                <div class="col">
                    <div class="card-counter">
                        <h4 style="color:green;"><b>10</b></h4>
                        <p>Active Users</p>
                    </div>
                </div>
                <div class="col">
                    <div class="card-counter">
                        <h4 style="color:red;"><b>3</b></h4>
                        <p>Admins</p>
                    </div>
                </div>
                <div class="col">
                    <div class="card-counter">
                        <h4 style="color:purple;"><b>5</b></h4>
                        <p>Trip Managers</p>
                    </div>
                </div>
            </div>

            <!-- System Users -->
            <h5><b>System Users</b></h5>
            <div id="noUserMsg" class="alert alert-warning text-center mt-3" style="display: none;">
                No record present.
            </div>

            <div id="usersContainer" class="d-flex flex-column gap-3">
                <div class="text-center py-5"><div class="spinner-border text-primary"></div></div>
            </div>

        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="registerModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Register New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body p-0" id="registerModalBody">
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Assign Role Modal -->
    <div class="modal fade" id="assignRoleModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assign Roles</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="roleCheckboxList" class="form-check d-flex flex-column gap-2">
                        <div class="text-center"><div class="spinner-border text-primary"></div></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="saveRoleBtn">Save</button>
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
                <br>



            </div>
        </div>
    </div>
  
    <!-- Add Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="editUserForm">
                    <div class="modal-body">
                        <input type="hidden" id="editUserId">
                        <div class="mb-3">
                            <label for="editFirstName" class="form-label">First Name</label>
                            <input type="text" class="form-control" id="editFirstName" required>
                        </div>
                        <div class="mb-3">
                            <label for="editMiddleName" class="form-label">Middle Name</label>
                            <input type="text" class="form-control" id="editMiddleName">
                        </div>
                        <div class="mb-3">
                            <label for="editLastName" class="form-label">Last Name</label>
                            <input type="text" class="form-control" id="editLastName" required>
                        </div>
                        <div class="mb-3">
                            <label for="editEmailAddress" class="form-label">Email Address</label>
                            <input type="email" class="form-control" id="editEmailAddress" required>
                        </div>
                        <div class="mb-3">
                            <label for="editMobileNo" class="form-label">Mobile No</label>
                            <input type="text" class="form-control" id="editMobileNo">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <!-- User Delete Confirmation Modal -->
    <div class="modal fade" id="userDeleteModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content shadow-lg">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm User Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this user along with their assigned roles?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="confirmUserDeleteBtn" class="btn btn-danger">Yes, Delete</button>
                </div>
            </div>
        </div>
    </div>

    @{
        var userOperations = User.Claims
        .Where(c => c.Type == "Operation")
        .Select(c => c.Value)
        .ToList();

        bool canEdit = userOperations.Contains("CanEditUser");
        bool canDelete = userOperations.Contains("CanDeleteUser");
    }


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const hasEditPermission = @canEdit.ToString().ToLower();
        const hasDeletePermission = @canDelete.ToString().ToLower();
    </script>




    <script>
        // Open edit modal and populate data
        $(document).on("click", ".btn-edit", function () {
            const userId = $(this).data("userid");

            $.get(`${apiBaseUrl}/api/User`, function (users) {
                const user = users.find(u => u.userId === userId);
                if (!user) {
                    alert("User not found.");
                    return;
                }

                $("#editUserId").val(user.userId);
                $("#editFirstName").val(user.firstName);
                $("#editMiddleName").val(user.middleName || '');
                $("#editLastName").val(user.lastName);
                $("#editEmailAddress").val(user.emailAddress);
                $("#editMobileNo").val(user.mobileNo);

                const modal = new bootstrap.Modal(document.getElementById("editUserModal"));
                modal.show();
            });
        });

        // Save edited user
     $("#editUserForm").submit(function (e) {
       e.preventDefault();
    
        const sessionId = sessionStorage.getItem("sessionId");
       const id = $("#editUserId").val();
      const firstName = $("#editFirstName").val().trim();
            const middleName = $("#editMiddleName").val().trim();
    const lastName = $("#editLastName").val().trim();
    const email = $("#editEmailAddress").val().trim();
    const mobile = $("#editMobileNo").val().trim();

    // Validation
    if (!firstName || !lastName || !email) {
        alert("First name, last name, and email are required.");
        return;
    }

    

    if (mobile && !/^\d{10}$/.test(mobile)) {
        alert("Mobile number must be exactly 10 digits if provided.");
        return;
    }

    const data = {
        userId: id,
        firstName,
        lastName,
        emailAddress: email,
        mobileNo: mobile,
        middleName: $("#editMiddleName").val().trim()
    };

    // Submit AJAX PUT
    $.ajax({
        url: `${apiBaseUrl}/api/User/${id}`, // Ensure your controller allows this
        method: "PUT",
        contentType: "application/json",
        data: JSON.stringify(data),
        success: function (res) {
            const modal = bootstrap.Modal.getInstance(document.getElementById("editUserModal"));
            modal.hide();
            $('#successMessage').text(res.message || 'User updated successfully').removeClass("d-none");
            setTimeout(() => location.reload(), 1000);
        },
        error: function (xhr) {
            const errorResponse = xhr.responseJSON;
            if (errorResponse?.errors?.emailAddress) {
                alert("Email already exists.");
            } else {
                alert("Failed to update user: " + xhr.responseText);
            }
        }
    });
});

    </script>




    <script>
        const apiBaseUrl = "https://localhost:7228";
        let selectedUserId = null;

        // Load users and render cards
        window.loadUsers = function (page = 1, pageSize = 10, searchTerm = "") {
            $('#usersContainer').html('<div class="text-center py-5"><div class="spinner-border text-primary"></div></div>');
            $("#noUserMsg").hide();

            $.ajax({
                url: `${apiBaseUrl}/api/User`,
                type: 'GET',
                success: function (data) {
                    if (!data.length) {
                        $('#usersContainer').html('<div class="alert alert-warning text-center">No users found.</div>');
                        return;
                    }

                    // Filter by search term
                    const filteredData = data.filter(user =>
                        (user.firstName?.toLowerCase() ?? '').includes(searchTerm.toLowerCase()) ||
                        (user.lastName?.toLowerCase() ?? '').includes(searchTerm.toLowerCase()) ||
                        (user.emailAddress?.toLowerCase() ?? '').includes(searchTerm.toLowerCase()) ||
                        (user.mobileNo?.toLowerCase() ?? '').includes(searchTerm.toLowerCase())
                    );

                    if (!filteredData.length) {
                        $('#usersContainer').empty();
                        $('#noUserMsg').show();
                        return;
                    }

                    const totalPages = Math.ceil(filteredData.length / pageSize);
                    const start = (page - 1) * pageSize;
                    const usersToShow = filteredData.slice(start, start + pageSize);

                    let html = '';
                    usersToShow.forEach(user => {
                        let initials = (user.firstName?.charAt(0) ?? '') + (user.lastName?.charAt(0) ?? '');
                        let rolesHtml = (user.roles ?? []).map(role =>
                            `<span class="badge me-1 p-2" style="background-color: #0d6efd; color: white;">${role}</span>`
                        ).join('');

                        html += `
                        <div class="user-card">
                            <div class="user-info-section">
                                <div class="user-initial">${initials.toUpperCase()}</div>
                                <div class="user-details">
                                    <div class="user-name-text">${user.firstName} ${user.lastName}</div>
                                    <div class="user-email">${user.emailAddress}</div>
                                </div>
                            </div>
                            <div class="user-metadata">
                                <div class="metadata-group">
                                    <div class="metadata-label">Role:</div>
                                    <div class="metadata-value" id="roleColumn-${user.userId}">
                                        ${rolesHtml || '<span class="text-muted">No roles</span>'}
                                    </div>
                                </div>
                                <div class="metadata-group">
                                    <div class="metadata-label">Mobile No:</div>
                                    <div class="metadata-value">${user.mobileNo ?? '-'}</div>
                                </div>
                                <div class="metadata-group">
                                    <div class="metadata-label">Last Login:</div>
                                    <div class="metadata-value">${user.lastLoggedOn?.substring(0, 10) ?? '-'}</div>
                                </div>
                                <div class="metadata-group">
                                    <div class="metadata-label">Status:</div>
                                    <div class="metadata-value">
                                        <span class="status-badge ${user.userIsActive ? 'status-active' : 'status-inactive'}">
                                        ${user.userIsActive ? 'Active' : 'Inactive'}
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="user-actions">
                                <button class="btn btn-outline-success btn-sm assign-role-btn" data-userid="${user.userId}" data-bs-toggle="modal" data-bs-target="#assignRoleModal">
                                    Assign Role
                                </button>
                                ${hasEditPermission ? `<button class="btn btn-edit" data-userid="${user.userId}">Edit</button>` : ''}
                                ${hasDeletePermission ? `<button class="btn btn-delete btn-delete-user" data-userid="${user.userId}">Delete</button>` : ''}
                                <button class="btn ${user.userIsActive ? 'btn-deactivate' : 'btn-activate'} toggle-status-btn" data-userid="${user.userId}" data-currentstatus="${user.userIsActive}">
                                    ${user.userIsActive ? 'Deactivate' : 'Activate'}
                                </button>
                            </div>
                        </div>`;
                    });

                    let pagination = `<nav><ul class="pagination justify-content-center mt-3">`;
                    for (let i = 1; i <= totalPages; i++) {
                        pagination += `<li class="page-item ${i === page ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                    }
                    pagination += `</ul></nav>`;

                    $('#usersContainer').html(html + pagination);
                },
                error: function () {
                    $('#usersContainer').html('<div class="alert alert-danger text-center">Failed to load users.</div>');
                }
            });
        };

        $(document).ready(function () {
            loadUsers();

            // Clear modal content on close
            $('#registerModal').on('hidden.bs.modal', function () {
                $('#registerModalBody').html('');
            });

            // Open registration modal
            $('#addNewUserBtn').click(function () {
                $('#registerModalBody').html('<div class="text-center py-5"><div class="spinner-border text-primary"></div></div>');
                $('#registerModalBody').load('/Register/Index?modal=true');
            });

            // Handle registration form submit
            $(document).on('submit', '#modalRegisterForm', function (e) {
                e.preventDefault();
                var $form = $(this);

                $.ajax({
                    url: $form.attr('action') + '?modal=true',
                    method: 'POST',
                    data: $form.serialize(),
                })
                    .done(function (result) {
                        if (result.success) {
                            const modalEl = document.getElementById('registerModal');
                            const modal = bootstrap.Modal.getInstance(modalEl);
                            modal.hide();

                            $('#successMessage').text(result.message).removeClass("d-none");

                            // Reload page after registration
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        } else {
                            $('#registerModalBody').html(result); // show validation errors
                        }
                    })
                    .fail(function () {
                        $('#registerModalBody').html('<div class="alert alert-danger p-3">Server error, try again.</div>');
                    });
            });

            // Handle pagination
            $(document).on('click', '.pagination .page-link', function (e) {
                e.preventDefault();
                const page = parseInt($(this).data('page'));
                const searchTerm = $('#SearchInput').val();
                loadUsers(page, 10, searchTerm);
            });



            let deleteUserId = 0;

            $(document).on('click', '.btn-delete-user', function () {
                deleteUserId = $(this).data('userid');
                $("#userDeleteModal").modal('show');
            });

            $("#confirmUserDeleteBtn").on('click', function () {
                if (deleteUserId) {
                    $.ajax({
                        url: `${apiBaseUrl}/api/User/${deleteUserId}`,
                        type: 'DELETE',
                        success: function () {
                            $("#userDeleteModal").modal('hide');
                            $('#successMessage').text("User deleted successfully").removeClass("d-none");

                            setTimeout(() => location.reload(), 1000);
                        },
                        error: function () {
                            $("#userDeleteModal").modal('hide');
                            alert("Failed to delete user.");
                        }
                    });
                }
            });

            // Assign Role - Open modal and load checkboxes
            $(document).on("click", ".assign-role-btn", function () {
                selectedUserId = $(this).data("userid");
                $("#roleCheckboxList").html(`<div class="text-center py-4"><div class="spinner-border text-primary"></div></div>`);

                $.get(`${apiBaseUrl}/api/Role`, function (roles) {
                    $.get(`${apiBaseUrl}/api/UserRole/User/${selectedUserId}`, function (assignedRaw) {
                        const assignedIds = assignedRaw.map(r => typeof r === "number" ? r :
                            r.roleId ? parseInt(r.roleId) :
                                r.RoleId ? parseInt(r.RoleId) :
                                    parseInt(Object.values(r).find(val => !isNaN(val)))
                        );

                        let html = '';
                        roles.forEach(role => {
                            const isChecked = assignedIds.includes(role.roleId) ? "checked" : "";
                            html += `
                                    <div class="form-check d-flex justify-content-between align-items-center">
                                        <div>
                                            <input class="form-check-input role-checkbox" type="checkbox" value="${role.roleId}" id="role-${role.roleId}" ${isChecked}>
                                            <label class="form-check-label" for="role-${role.roleId}">${role.roleName}</label>
                                        </div>
                                    </div>`;
                        });

                        $("#roleCheckboxList").html(html);
                    });
                });
            });

            // Save assigned roles
            $("#saveRoleBtn").click(function () {
                const selectedRoles = $(".role-checkbox:checked").map(function () {
                    return parseInt($(this).val());
                }).get();

                if (!selectedUserId || selectedRoles.length === 0) {
                    alert("Please select at least one role.");
                    return;
                }

                $.ajax({
                    url: `${apiBaseUrl}/api/UserRole/AssignRoles`,
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({
                        userId: selectedUserId,
                        roleIds: selectedRoles
                    }),
                    success: function (res) {
                        const modalEl = document.getElementById('assignRoleModal');
                        const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
                        modal.hide();

                        $('#successMessage').text(res.message).removeClass("d-none");
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    },
                    error: function (xhr) {
                        alert("Error: " + xhr.responseText);
                    }
                });
            });
            $(document).on('click', '.toggle-status-btn', function () {
                const userId = $(this).data('userid');
                const currentStatus = $(this).data('currentstatus');
                const newStatus = currentStatus ? false : true; // Toggle Boolean value

                if (confirm(`Are you sure you want to ${newStatus ? 'Activate' : 'Deactivate'} this user?`)) {
                    $.ajax({
                        url: `${apiBaseUrl}/api/User/ChangeStatus/${userId}`,
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify({ UserIsActive: newStatus }), // Capital "U"
                        success: function () {
                            $('#successMessage').text(`User ${newStatus ? 'Activated' : 'Deactivated'} successfully.`).removeClass("d-none");
                            setTimeout(() => loadUsers(), 1000);
                        },
                        error: function (xhr) {
                            console.log(xhr.responseText); // Debug response
                            alert("Failed to update user status.");
                        }
                    });
                }
            });


        });
    </script>

    <script>
                $('#SearchInput').on('keyup', function () {
            const searchTerm = $(this).val();
            loadUsers(1, 10, searchTerm);
        });
</script>

    <!--Logout click-->
 <script>
        $(document).on("click", "#logoutBtn", function () {
            sessionStorage.clear();
            localStorage.clear();
            window.location.href = "/Login/Logout";
        });

 </script>


</body>
</html>